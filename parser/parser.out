Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> function
Rule 2     function -> INT IDENTIFIER LPAREN RPAREN LBRACE statement RBRACE
Rule 3     unary_op -> NEGATION exp
Rule 4     unary_op -> BITWISE_COMPLEMENT exp
Rule 5     unary_op -> LOGICAL_NEGATION exp
Rule 6     exp -> unary_op
Rule 7     exp -> INTEGER
Rule 8     statement -> RETURN exp SEMICOLON

Terminals, with rules where they appear

BITWISE_COMPLEMENT   : 4
IDENTIFIER           : 2
INT                  : 2
INTEGER              : 7
LBRACE               : 2
LOGICAL_NEGATION     : 5
LPAREN               : 2
NEGATION             : 3
RBRACE               : 2
RETURN               : 8
RPAREN               : 2
SEMICOLON            : 8
error                : 

Nonterminals, with rules where they appear

exp                  : 3 4 5 8
function             : 1
program              : 0
statement            : 2
unary_op             : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . function
    (2) function -> . INT IDENTIFIER LPAREN RPAREN LBRACE statement RBRACE

    INT             shift and go to state 3

    function                       shift and go to state 1
    program                        shift and go to state 2

state 1

    (1) program -> function .

    $end            reduce using rule 1 (program -> function .)


state 2

    (0) S' -> program .



state 3

    (2) function -> INT . IDENTIFIER LPAREN RPAREN LBRACE statement RBRACE

    IDENTIFIER      shift and go to state 4


state 4

    (2) function -> INT IDENTIFIER . LPAREN RPAREN LBRACE statement RBRACE

    LPAREN          shift and go to state 5


state 5

    (2) function -> INT IDENTIFIER LPAREN . RPAREN LBRACE statement RBRACE

    RPAREN          shift and go to state 6


state 6

    (2) function -> INT IDENTIFIER LPAREN RPAREN . LBRACE statement RBRACE

    LBRACE          shift and go to state 7


state 7

    (2) function -> INT IDENTIFIER LPAREN RPAREN LBRACE . statement RBRACE
    (8) statement -> . RETURN exp SEMICOLON

    RETURN          shift and go to state 9

    statement                      shift and go to state 8

state 8

    (2) function -> INT IDENTIFIER LPAREN RPAREN LBRACE statement . RBRACE

    RBRACE          shift and go to state 10


state 9

    (8) statement -> RETURN . exp SEMICOLON
    (6) exp -> . unary_op
    (7) exp -> . INTEGER
    (3) unary_op -> . NEGATION exp
    (4) unary_op -> . BITWISE_COMPLEMENT exp
    (5) unary_op -> . LOGICAL_NEGATION exp

    INTEGER         shift and go to state 12
    NEGATION        shift and go to state 15
    BITWISE_COMPLEMENT shift and go to state 13
    LOGICAL_NEGATION shift and go to state 11

    unary_op                       shift and go to state 14
    exp                            shift and go to state 16

state 10

    (2) function -> INT IDENTIFIER LPAREN RPAREN LBRACE statement RBRACE .

    $end            reduce using rule 2 (function -> INT IDENTIFIER LPAREN RPAREN LBRACE statement RBRACE .)


state 11

    (5) unary_op -> LOGICAL_NEGATION . exp
    (6) exp -> . unary_op
    (7) exp -> . INTEGER
    (3) unary_op -> . NEGATION exp
    (4) unary_op -> . BITWISE_COMPLEMENT exp
    (5) unary_op -> . LOGICAL_NEGATION exp

    INTEGER         shift and go to state 12
    NEGATION        shift and go to state 15
    BITWISE_COMPLEMENT shift and go to state 13
    LOGICAL_NEGATION shift and go to state 11

    unary_op                       shift and go to state 14
    exp                            shift and go to state 17

state 12

    (7) exp -> INTEGER .

    SEMICOLON       reduce using rule 7 (exp -> INTEGER .)


state 13

    (4) unary_op -> BITWISE_COMPLEMENT . exp
    (6) exp -> . unary_op
    (7) exp -> . INTEGER
    (3) unary_op -> . NEGATION exp
    (4) unary_op -> . BITWISE_COMPLEMENT exp
    (5) unary_op -> . LOGICAL_NEGATION exp

    INTEGER         shift and go to state 12
    NEGATION        shift and go to state 15
    BITWISE_COMPLEMENT shift and go to state 13
    LOGICAL_NEGATION shift and go to state 11

    unary_op                       shift and go to state 14
    exp                            shift and go to state 18

state 14

    (6) exp -> unary_op .

    SEMICOLON       reduce using rule 6 (exp -> unary_op .)


state 15

    (3) unary_op -> NEGATION . exp
    (6) exp -> . unary_op
    (7) exp -> . INTEGER
    (3) unary_op -> . NEGATION exp
    (4) unary_op -> . BITWISE_COMPLEMENT exp
    (5) unary_op -> . LOGICAL_NEGATION exp

    INTEGER         shift and go to state 12
    NEGATION        shift and go to state 15
    BITWISE_COMPLEMENT shift and go to state 13
    LOGICAL_NEGATION shift and go to state 11

    unary_op                       shift and go to state 14
    exp                            shift and go to state 19

state 16

    (8) statement -> RETURN exp . SEMICOLON

    SEMICOLON       shift and go to state 20


state 17

    (5) unary_op -> LOGICAL_NEGATION exp .

    SEMICOLON       reduce using rule 5 (unary_op -> LOGICAL_NEGATION exp .)


state 18

    (4) unary_op -> BITWISE_COMPLEMENT exp .

    SEMICOLON       reduce using rule 4 (unary_op -> BITWISE_COMPLEMENT exp .)


state 19

    (3) unary_op -> NEGATION exp .

    SEMICOLON       reduce using rule 3 (unary_op -> NEGATION exp .)


state 20

    (8) statement -> RETURN exp SEMICOLON .

    RBRACE          reduce using rule 8 (statement -> RETURN exp SEMICOLON .)

