Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> function
Rule 2     function -> INT IDENTIFIER LPAREN RPAREN LBRACE statement RBRACE
Rule 3     exp -> INTEGER
Rule 4     statement -> RETURN exp SEMICOLON

Terminals, with rules where they appear

IDENTIFIER           : 2
INT                  : 2
INTEGER              : 3
LBRACE               : 2
LPAREN               : 2
RBRACE               : 2
RETURN               : 4
RPAREN               : 2
SEMICOLON            : 4
error                : 

Nonterminals, with rules where they appear

exp                  : 4
function             : 1
program              : 0
statement            : 2

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . function
    (2) function -> . INT IDENTIFIER LPAREN RPAREN LBRACE statement RBRACE

    INT             shift and go to state 2

    function                       shift and go to state 3
    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (2) function -> INT . IDENTIFIER LPAREN RPAREN LBRACE statement RBRACE

    IDENTIFIER      shift and go to state 4


state 3

    (1) program -> function .

    $end            reduce using rule 1 (program -> function .)


state 4

    (2) function -> INT IDENTIFIER . LPAREN RPAREN LBRACE statement RBRACE

    LPAREN          shift and go to state 5


state 5

    (2) function -> INT IDENTIFIER LPAREN . RPAREN LBRACE statement RBRACE

    RPAREN          shift and go to state 6


state 6

    (2) function -> INT IDENTIFIER LPAREN RPAREN . LBRACE statement RBRACE

    LBRACE          shift and go to state 7


state 7

    (2) function -> INT IDENTIFIER LPAREN RPAREN LBRACE . statement RBRACE
    (4) statement -> . RETURN exp SEMICOLON

    RETURN          shift and go to state 8

    statement                      shift and go to state 9

state 8

    (4) statement -> RETURN . exp SEMICOLON
    (3) exp -> . INTEGER

    INTEGER         shift and go to state 10

    exp                            shift and go to state 11

state 9

    (2) function -> INT IDENTIFIER LPAREN RPAREN LBRACE statement . RBRACE

    RBRACE          shift and go to state 12


state 10

    (3) exp -> INTEGER .

    SEMICOLON       reduce using rule 3 (exp -> INTEGER .)


state 11

    (4) statement -> RETURN exp . SEMICOLON

    SEMICOLON       shift and go to state 13


state 12

    (2) function -> INT IDENTIFIER LPAREN RPAREN LBRACE statement RBRACE .

    $end            reduce using rule 2 (function -> INT IDENTIFIER LPAREN RPAREN LBRACE statement RBRACE .)


state 13

    (4) statement -> RETURN exp SEMICOLON .

    RBRACE          reduce using rule 4 (statement -> RETURN exp SEMICOLON .)

